<?php
/**
 * GetGoodsFeedbackRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetGoodsFeedbackRequest Class Doc Comment
 *
 * @category Class
 * @description Фильтр запроса отзывов в кабинете.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetGoodsFeedbackRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetGoodsFeedbackRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date_time_from' => '\DateTime',
        'date_time_to' => '\DateTime',
        'reaction_status' => '\OpenAPI\Client\Model\FeedbackReactionStatusType',
        'rating_values' => 'int[]',
        'model_ids' => 'int[]',
        'paid' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date_time_from' => 'date-time',
        'date_time_to' => 'date-time',
        'reaction_status' => null,
        'rating_values' => 'int32',
        'model_ids' => 'int64',
        'paid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'date_time_from' => false,
        'date_time_to' => false,
        'reaction_status' => false,
        'rating_values' => true,
        'model_ids' => true,
        'paid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_time_from' => 'dateTimeFrom',
        'date_time_to' => 'dateTimeTo',
        'reaction_status' => 'reactionStatus',
        'rating_values' => 'ratingValues',
        'model_ids' => 'modelIds',
        'paid' => 'paid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_time_from' => 'setDateTimeFrom',
        'date_time_to' => 'setDateTimeTo',
        'reaction_status' => 'setReactionStatus',
        'rating_values' => 'setRatingValues',
        'model_ids' => 'setModelIds',
        'paid' => 'setPaid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_time_from' => 'getDateTimeFrom',
        'date_time_to' => 'getDateTimeTo',
        'reaction_status' => 'getReactionStatus',
        'rating_values' => 'getRatingValues',
        'model_ids' => 'getModelIds',
        'paid' => 'getPaid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('date_time_from', $data ?? [], null);
        $this->setIfExists('date_time_to', $data ?? [], null);
        $this->setIfExists('reaction_status', $data ?? [], null);
        $this->setIfExists('rating_values', $data ?? [], null);
        $this->setIfExists('model_ids', $data ?? [], null);
        $this->setIfExists('paid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['rating_values']) && (count($this->container['rating_values']) > 5)) {
            $invalidProperties[] = "invalid value for 'rating_values', number of items must be less than or equal to 5.";
        }

        if (!is_null($this->container['model_ids']) && (count($this->container['model_ids']) > 20)) {
            $invalidProperties[] = "invalid value for 'model_ids', number of items must be less than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_time_from
     *
     * @return \DateTime|null
     */
    public function getDateTimeFrom()
    {
        return $this->container['date_time_from'];
    }

    /**
     * Sets date_time_from
     *
     * @param \DateTime|null $date_time_from Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты.
     *
     * @return self
     */
    public function setDateTimeFrom($date_time_from)
    {
        if (is_null($date_time_from)) {
            throw new \InvalidArgumentException('non-nullable date_time_from cannot be null');
        }
        $this->container['date_time_from'] = $date_time_from;

        return $this;
    }

    /**
     * Gets date_time_to
     *
     * @return \DateTime|null
     */
    public function getDateTimeTo()
    {
        return $this->container['date_time_to'];
    }

    /**
     * Sets date_time_to
     *
     * @param \DateTime|null $date_time_to Конец периода. Не включительно.  Если параметр не указан, используется текущая дата.
     *
     * @return self
     */
    public function setDateTimeTo($date_time_to)
    {
        if (is_null($date_time_to)) {
            throw new \InvalidArgumentException('non-nullable date_time_to cannot be null');
        }
        $this->container['date_time_to'] = $date_time_to;

        return $this;
    }

    /**
     * Gets reaction_status
     *
     * @return \OpenAPI\Client\Model\FeedbackReactionStatusType|null
     */
    public function getReactionStatus()
    {
        return $this->container['reaction_status'];
    }

    /**
     * Sets reaction_status
     *
     * @param \OpenAPI\Client\Model\FeedbackReactionStatusType|null $reaction_status reaction_status
     *
     * @return self
     */
    public function setReactionStatus($reaction_status)
    {
        if (is_null($reaction_status)) {
            throw new \InvalidArgumentException('non-nullable reaction_status cannot be null');
        }
        $this->container['reaction_status'] = $reaction_status;

        return $this;
    }

    /**
     * Gets rating_values
     *
     * @return int[]|null
     */
    public function getRatingValues()
    {
        return $this->container['rating_values'];
    }

    /**
     * Sets rating_values
     *
     * @param int[]|null $rating_values Оценка товара.
     *
     * @return self
     */
    public function setRatingValues($rating_values)
    {
        if (is_null($rating_values)) {
            array_push($this->openAPINullablesSetToNull, 'rating_values');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rating_values', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($rating_values) && (count($rating_values) > 5)) {
            throw new \InvalidArgumentException('invalid value for $rating_values when calling GetGoodsFeedbackRequest., number of items must be less than or equal to 5.');
        }
        $this->container['rating_values'] = $rating_values;

        return $this;
    }

    /**
     * Gets model_ids
     *
     * @return int[]|null
     */
    public function getModelIds()
    {
        return $this->container['model_ids'];
    }

    /**
     * Sets model_ids
     *
     * @param int[]|null $model_ids Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md).
     *
     * @return self
     */
    public function setModelIds($model_ids)
    {
        if (is_null($model_ids)) {
            array_push($this->openAPINullablesSetToNull, 'model_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('model_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($model_ids) && (count($model_ids) > 20)) {
            throw new \InvalidArgumentException('invalid value for $model_ids when calling GetGoodsFeedbackRequest., number of items must be less than or equal to 20.');
        }
        $this->container['model_ids'] = $model_ids;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return bool|null
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param bool|null $paid Фильтр отзывов за баллы Плюса.
     *
     * @return self
     */
    public function setPaid($paid)
    {
        if (is_null($paid)) {
            throw new \InvalidArgumentException('non-nullable paid cannot be null');
        }
        $this->container['paid'] = $paid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


